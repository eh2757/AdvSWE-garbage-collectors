// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: health_records.proto

#include "health_records.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace health {
PROTOBUF_CONSTEXPR PatientData::PatientData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.medications_)*/{}
  , /*decltype(_impl_.patient_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PatientDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatientDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatientDataDefaultTypeInternal() {}
  union {
    PatientData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatientDataDefaultTypeInternal _PatientData_default_instance_;
PROTOBUF_CONSTEXPR Medication::Medication(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dosage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.medication_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MedicationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MedicationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MedicationDefaultTypeInternal() {}
  union {
    Medication _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MedicationDefaultTypeInternal _Medication_default_instance_;
PROTOBUF_CONSTEXPR HealthRecordRequest::HealthRecordRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.patient_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HealthRecordRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthRecordRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthRecordRequestDefaultTypeInternal() {}
  union {
    HealthRecordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthRecordRequestDefaultTypeInternal _HealthRecordRequest_default_instance_;
PROTOBUF_CONSTEXPR HealthRecordResponse::HealthRecordResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.patient_data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HealthRecordResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthRecordResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthRecordResponseDefaultTypeInternal() {}
  union {
    HealthRecordResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthRecordResponseDefaultTypeInternal _HealthRecordResponse_default_instance_;
PROTOBUF_CONSTEXPR UpdateHealthRecordRequest::UpdateHealthRecordRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.patient_data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateHealthRecordRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateHealthRecordRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateHealthRecordRequestDefaultTypeInternal() {}
  union {
    UpdateHealthRecordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateHealthRecordRequestDefaultTypeInternal _UpdateHealthRecordRequest_default_instance_;
}  // namespace health
static ::_pb::Metadata file_level_metadata_health_5frecords_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_health_5frecords_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_health_5frecords_2eproto = nullptr;

const uint32_t TableStruct_health_5frecords_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::health::PatientData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::health::PatientData, _impl_.patient_id_),
  PROTOBUF_FIELD_OFFSET(::health::PatientData, _impl_.medications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::health::Medication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::health::Medication, _impl_.medication_id_),
  PROTOBUF_FIELD_OFFSET(::health::Medication, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::health::Medication, _impl_.dosage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::health::HealthRecordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::health::HealthRecordRequest, _impl_.patient_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::health::HealthRecordResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::health::HealthRecordResponse, _impl_.patient_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::health::UpdateHealthRecordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::health::UpdateHealthRecordRequest, _impl_.patient_data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::health::PatientData)},
  { 8, -1, -1, sizeof(::health::Medication)},
  { 17, -1, -1, sizeof(::health::HealthRecordRequest)},
  { 24, -1, -1, sizeof(::health::HealthRecordResponse)},
  { 31, -1, -1, sizeof(::health::UpdateHealthRecordRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::health::_PatientData_default_instance_._instance,
  &::health::_Medication_default_instance_._instance,
  &::health::_HealthRecordRequest_default_instance_._instance,
  &::health::_HealthRecordResponse_default_instance_._instance,
  &::health::_UpdateHealthRecordRequest_default_instance_._instance,
};

const char descriptor_table_protodef_health_5frecords_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024health_records.proto\022\006health\"J\n\013Patien"
  "tData\022\022\n\npatient_id\030\001 \001(\005\022\'\n\013medications"
  "\030\002 \003(\0132\022.health.Medication\"A\n\nMedication"
  "\022\025\n\rmedication_id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\016\n"
  "\006dosage\030\003 \001(\t\")\n\023HealthRecordRequest\022\022\n\n"
  "patient_id\030\001 \001(\005\"A\n\024HealthRecordResponse"
  "\022)\n\014patient_data\030\001 \001(\0132\023.health.PatientD"
  "ata\"F\n\031UpdateHealthRecordRequest\022)\n\014pati"
  "ent_data\030\001 \001(\0132\023.health.PatientData2\201\002\n\024"
  "HealthRecordsService\022D\n\017AddHealthRecord\022"
  "\023.health.PatientData\032\034.health.HealthReco"
  "rdResponse\022L\n\017GetHealthRecord\022\033.health.H"
  "ealthRecordRequest\032\034.health.HealthRecord"
  "Response\022U\n\022UpdateHealthRecord\022!.health."
  "UpdateHealthRecordRequest\032\034.health.Healt"
  "hRecordResponseb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_health_5frecords_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_health_5frecords_2eproto = {
    false, false, 623, descriptor_table_protodef_health_5frecords_2eproto,
    "health_records.proto",
    &descriptor_table_health_5frecords_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_health_5frecords_2eproto::offsets,
    file_level_metadata_health_5frecords_2eproto, file_level_enum_descriptors_health_5frecords_2eproto,
    file_level_service_descriptors_health_5frecords_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_health_5frecords_2eproto_getter() {
  return &descriptor_table_health_5frecords_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_health_5frecords_2eproto(&descriptor_table_health_5frecords_2eproto);
namespace health {

// ===================================================================

class PatientData::_Internal {
 public:
};

PatientData::PatientData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:health.PatientData)
}
PatientData::PatientData(const PatientData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PatientData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.medications_){from._impl_.medications_}
    , decltype(_impl_.patient_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.patient_id_ = from._impl_.patient_id_;
  // @@protoc_insertion_point(copy_constructor:health.PatientData)
}

inline void PatientData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.medications_){arena}
    , decltype(_impl_.patient_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PatientData::~PatientData() {
  // @@protoc_insertion_point(destructor:health.PatientData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PatientData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.medications_.~RepeatedPtrField();
}

void PatientData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PatientData::Clear() {
// @@protoc_insertion_point(message_clear_start:health.PatientData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.medications_.Clear();
  _impl_.patient_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatientData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 patient_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.patient_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .health.Medication medications = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_medications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PatientData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:health.PatientData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 patient_id = 1;
  if (this->_internal_patient_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_patient_id(), target);
  }

  // repeated .health.Medication medications = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_medications_size()); i < n; i++) {
    const auto& repfield = this->_internal_medications(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:health.PatientData)
  return target;
}

size_t PatientData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:health.PatientData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .health.Medication medications = 2;
  total_size += 1UL * this->_internal_medications_size();
  for (const auto& msg : this->_impl_.medications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 patient_id = 1;
  if (this->_internal_patient_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_patient_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PatientData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PatientData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PatientData::GetClassData() const { return &_class_data_; }


void PatientData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PatientData*>(&to_msg);
  auto& from = static_cast<const PatientData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:health.PatientData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.medications_.MergeFrom(from._impl_.medications_);
  if (from._internal_patient_id() != 0) {
    _this->_internal_set_patient_id(from._internal_patient_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PatientData::CopyFrom(const PatientData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:health.PatientData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatientData::IsInitialized() const {
  return true;
}

void PatientData::InternalSwap(PatientData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.medications_.InternalSwap(&other->_impl_.medications_);
  swap(_impl_.patient_id_, other->_impl_.patient_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatientData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_health_5frecords_2eproto_getter, &descriptor_table_health_5frecords_2eproto_once,
      file_level_metadata_health_5frecords_2eproto[0]);
}

// ===================================================================

class Medication::_Internal {
 public:
};

Medication::Medication(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:health.Medication)
}
Medication::Medication(const Medication& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Medication* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.dosage_){}
    , decltype(_impl_.medication_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dosage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dosage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dosage().empty()) {
    _this->_impl_.dosage_.Set(from._internal_dosage(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.medication_id_ = from._impl_.medication_id_;
  // @@protoc_insertion_point(copy_constructor:health.Medication)
}

inline void Medication::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.dosage_){}
    , decltype(_impl_.medication_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dosage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dosage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Medication::~Medication() {
  // @@protoc_insertion_point(destructor:health.Medication)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Medication::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.dosage_.Destroy();
}

void Medication::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Medication::Clear() {
// @@protoc_insertion_point(message_clear_start:health.Medication)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.dosage_.ClearToEmpty();
  _impl_.medication_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Medication::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 medication_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.medication_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "health.Medication.name"));
        } else
          goto handle_unusual;
        continue;
      // string dosage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dosage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "health.Medication.dosage"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Medication::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:health.Medication)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 medication_id = 1;
  if (this->_internal_medication_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_medication_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "health.Medication.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string dosage = 3;
  if (!this->_internal_dosage().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dosage().data(), static_cast<int>(this->_internal_dosage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "health.Medication.dosage");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dosage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:health.Medication)
  return target;
}

size_t Medication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:health.Medication)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string dosage = 3;
  if (!this->_internal_dosage().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dosage());
  }

  // int32 medication_id = 1;
  if (this->_internal_medication_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_medication_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Medication::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Medication::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Medication::GetClassData() const { return &_class_data_; }


void Medication::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Medication*>(&to_msg);
  auto& from = static_cast<const Medication&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:health.Medication)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_dosage().empty()) {
    _this->_internal_set_dosage(from._internal_dosage());
  }
  if (from._internal_medication_id() != 0) {
    _this->_internal_set_medication_id(from._internal_medication_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Medication::CopyFrom(const Medication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:health.Medication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Medication::IsInitialized() const {
  return true;
}

void Medication::InternalSwap(Medication* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dosage_, lhs_arena,
      &other->_impl_.dosage_, rhs_arena
  );
  swap(_impl_.medication_id_, other->_impl_.medication_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Medication::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_health_5frecords_2eproto_getter, &descriptor_table_health_5frecords_2eproto_once,
      file_level_metadata_health_5frecords_2eproto[1]);
}

// ===================================================================

class HealthRecordRequest::_Internal {
 public:
};

HealthRecordRequest::HealthRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:health.HealthRecordRequest)
}
HealthRecordRequest::HealthRecordRequest(const HealthRecordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HealthRecordRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.patient_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.patient_id_ = from._impl_.patient_id_;
  // @@protoc_insertion_point(copy_constructor:health.HealthRecordRequest)
}

inline void HealthRecordRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.patient_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HealthRecordRequest::~HealthRecordRequest() {
  // @@protoc_insertion_point(destructor:health.HealthRecordRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HealthRecordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HealthRecordRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HealthRecordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:health.HealthRecordRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.patient_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthRecordRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 patient_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.patient_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthRecordRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:health.HealthRecordRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 patient_id = 1;
  if (this->_internal_patient_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_patient_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:health.HealthRecordRequest)
  return target;
}

size_t HealthRecordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:health.HealthRecordRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 patient_id = 1;
  if (this->_internal_patient_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_patient_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthRecordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HealthRecordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthRecordRequest::GetClassData() const { return &_class_data_; }


void HealthRecordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HealthRecordRequest*>(&to_msg);
  auto& from = static_cast<const HealthRecordRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:health.HealthRecordRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_patient_id() != 0) {
    _this->_internal_set_patient_id(from._internal_patient_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthRecordRequest::CopyFrom(const HealthRecordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:health.HealthRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthRecordRequest::IsInitialized() const {
  return true;
}

void HealthRecordRequest::InternalSwap(HealthRecordRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.patient_id_, other->_impl_.patient_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthRecordRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_health_5frecords_2eproto_getter, &descriptor_table_health_5frecords_2eproto_once,
      file_level_metadata_health_5frecords_2eproto[2]);
}

// ===================================================================

class HealthRecordResponse::_Internal {
 public:
  static const ::health::PatientData& patient_data(const HealthRecordResponse* msg);
};

const ::health::PatientData&
HealthRecordResponse::_Internal::patient_data(const HealthRecordResponse* msg) {
  return *msg->_impl_.patient_data_;
}
HealthRecordResponse::HealthRecordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:health.HealthRecordResponse)
}
HealthRecordResponse::HealthRecordResponse(const HealthRecordResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HealthRecordResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.patient_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patient_data()) {
    _this->_impl_.patient_data_ = new ::health::PatientData(*from._impl_.patient_data_);
  }
  // @@protoc_insertion_point(copy_constructor:health.HealthRecordResponse)
}

inline void HealthRecordResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.patient_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HealthRecordResponse::~HealthRecordResponse() {
  // @@protoc_insertion_point(destructor:health.HealthRecordResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HealthRecordResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.patient_data_;
}

void HealthRecordResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HealthRecordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:health.HealthRecordResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.patient_data_ != nullptr) {
    delete _impl_.patient_data_;
  }
  _impl_.patient_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthRecordResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .health.PatientData patient_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patient_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthRecordResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:health.HealthRecordResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .health.PatientData patient_data = 1;
  if (this->_internal_has_patient_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::patient_data(this),
        _Internal::patient_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:health.HealthRecordResponse)
  return target;
}

size_t HealthRecordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:health.HealthRecordResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .health.PatientData patient_data = 1;
  if (this->_internal_has_patient_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.patient_data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthRecordResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HealthRecordResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthRecordResponse::GetClassData() const { return &_class_data_; }


void HealthRecordResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HealthRecordResponse*>(&to_msg);
  auto& from = static_cast<const HealthRecordResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:health.HealthRecordResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_patient_data()) {
    _this->_internal_mutable_patient_data()->::health::PatientData::MergeFrom(
        from._internal_patient_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthRecordResponse::CopyFrom(const HealthRecordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:health.HealthRecordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthRecordResponse::IsInitialized() const {
  return true;
}

void HealthRecordResponse::InternalSwap(HealthRecordResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.patient_data_, other->_impl_.patient_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthRecordResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_health_5frecords_2eproto_getter, &descriptor_table_health_5frecords_2eproto_once,
      file_level_metadata_health_5frecords_2eproto[3]);
}

// ===================================================================

class UpdateHealthRecordRequest::_Internal {
 public:
  static const ::health::PatientData& patient_data(const UpdateHealthRecordRequest* msg);
};

const ::health::PatientData&
UpdateHealthRecordRequest::_Internal::patient_data(const UpdateHealthRecordRequest* msg) {
  return *msg->_impl_.patient_data_;
}
UpdateHealthRecordRequest::UpdateHealthRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:health.UpdateHealthRecordRequest)
}
UpdateHealthRecordRequest::UpdateHealthRecordRequest(const UpdateHealthRecordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateHealthRecordRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.patient_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_patient_data()) {
    _this->_impl_.patient_data_ = new ::health::PatientData(*from._impl_.patient_data_);
  }
  // @@protoc_insertion_point(copy_constructor:health.UpdateHealthRecordRequest)
}

inline void UpdateHealthRecordRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.patient_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateHealthRecordRequest::~UpdateHealthRecordRequest() {
  // @@protoc_insertion_point(destructor:health.UpdateHealthRecordRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateHealthRecordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.patient_data_;
}

void UpdateHealthRecordRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateHealthRecordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:health.UpdateHealthRecordRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.patient_data_ != nullptr) {
    delete _impl_.patient_data_;
  }
  _impl_.patient_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateHealthRecordRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .health.PatientData patient_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patient_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateHealthRecordRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:health.UpdateHealthRecordRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .health.PatientData patient_data = 1;
  if (this->_internal_has_patient_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::patient_data(this),
        _Internal::patient_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:health.UpdateHealthRecordRequest)
  return target;
}

size_t UpdateHealthRecordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:health.UpdateHealthRecordRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .health.PatientData patient_data = 1;
  if (this->_internal_has_patient_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.patient_data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateHealthRecordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateHealthRecordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateHealthRecordRequest::GetClassData() const { return &_class_data_; }


void UpdateHealthRecordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateHealthRecordRequest*>(&to_msg);
  auto& from = static_cast<const UpdateHealthRecordRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:health.UpdateHealthRecordRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_patient_data()) {
    _this->_internal_mutable_patient_data()->::health::PatientData::MergeFrom(
        from._internal_patient_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateHealthRecordRequest::CopyFrom(const UpdateHealthRecordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:health.UpdateHealthRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateHealthRecordRequest::IsInitialized() const {
  return true;
}

void UpdateHealthRecordRequest::InternalSwap(UpdateHealthRecordRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.patient_data_, other->_impl_.patient_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateHealthRecordRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_health_5frecords_2eproto_getter, &descriptor_table_health_5frecords_2eproto_once,
      file_level_metadata_health_5frecords_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace health
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::health::PatientData*
Arena::CreateMaybeMessage< ::health::PatientData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::health::PatientData >(arena);
}
template<> PROTOBUF_NOINLINE ::health::Medication*
Arena::CreateMaybeMessage< ::health::Medication >(Arena* arena) {
  return Arena::CreateMessageInternal< ::health::Medication >(arena);
}
template<> PROTOBUF_NOINLINE ::health::HealthRecordRequest*
Arena::CreateMaybeMessage< ::health::HealthRecordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::health::HealthRecordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::health::HealthRecordResponse*
Arena::CreateMaybeMessage< ::health::HealthRecordResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::health::HealthRecordResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::health::UpdateHealthRecordRequest*
Arena::CreateMaybeMessage< ::health::UpdateHealthRecordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::health::UpdateHealthRecordRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
