// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: health_records.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_health_5frecords_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_health_5frecords_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_health_5frecords_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_health_5frecords_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_health_5frecords_2eproto;
namespace health {
class HealthRecordRequest;
struct HealthRecordRequestDefaultTypeInternal;
extern HealthRecordRequestDefaultTypeInternal _HealthRecordRequest_default_instance_;
class HealthRecordResponse;
struct HealthRecordResponseDefaultTypeInternal;
extern HealthRecordResponseDefaultTypeInternal _HealthRecordResponse_default_instance_;
class Medication;
struct MedicationDefaultTypeInternal;
extern MedicationDefaultTypeInternal _Medication_default_instance_;
class PatientData;
struct PatientDataDefaultTypeInternal;
extern PatientDataDefaultTypeInternal _PatientData_default_instance_;
class UpdateHealthRecordRequest;
struct UpdateHealthRecordRequestDefaultTypeInternal;
extern UpdateHealthRecordRequestDefaultTypeInternal _UpdateHealthRecordRequest_default_instance_;
}  // namespace health
PROTOBUF_NAMESPACE_OPEN
template<> ::health::HealthRecordRequest* Arena::CreateMaybeMessage<::health::HealthRecordRequest>(Arena*);
template<> ::health::HealthRecordResponse* Arena::CreateMaybeMessage<::health::HealthRecordResponse>(Arena*);
template<> ::health::Medication* Arena::CreateMaybeMessage<::health::Medication>(Arena*);
template<> ::health::PatientData* Arena::CreateMaybeMessage<::health::PatientData>(Arena*);
template<> ::health::UpdateHealthRecordRequest* Arena::CreateMaybeMessage<::health::UpdateHealthRecordRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace health {

// ===================================================================

class PatientData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:health.PatientData) */ {
 public:
  inline PatientData() : PatientData(nullptr) {}
  ~PatientData() override;
  explicit PROTOBUF_CONSTEXPR PatientData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PatientData(const PatientData& from);
  PatientData(PatientData&& from) noexcept
    : PatientData() {
    *this = ::std::move(from);
  }

  inline PatientData& operator=(const PatientData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatientData& operator=(PatientData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PatientData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PatientData* internal_default_instance() {
    return reinterpret_cast<const PatientData*>(
               &_PatientData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PatientData& a, PatientData& b) {
    a.Swap(&b);
  }
  inline void Swap(PatientData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatientData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PatientData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PatientData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PatientData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PatientData& from) {
    PatientData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "health.PatientData";
  }
  protected:
  explicit PatientData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMedicationsFieldNumber = 2,
    kPatientIdFieldNumber = 1,
  };
  // repeated .health.Medication medications = 2;
  int medications_size() const;
  private:
  int _internal_medications_size() const;
  public:
  void clear_medications();
  ::health::Medication* mutable_medications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::health::Medication >*
      mutable_medications();
  private:
  const ::health::Medication& _internal_medications(int index) const;
  ::health::Medication* _internal_add_medications();
  public:
  const ::health::Medication& medications(int index) const;
  ::health::Medication* add_medications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::health::Medication >&
      medications() const;

  // int32 patient_id = 1;
  void clear_patient_id();
  int32_t patient_id() const;
  void set_patient_id(int32_t value);
  private:
  int32_t _internal_patient_id() const;
  void _internal_set_patient_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:health.PatientData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::health::Medication > medications_;
    int32_t patient_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_health_5frecords_2eproto;
};
// -------------------------------------------------------------------

class Medication final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:health.Medication) */ {
 public:
  inline Medication() : Medication(nullptr) {}
  ~Medication() override;
  explicit PROTOBUF_CONSTEXPR Medication(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Medication(const Medication& from);
  Medication(Medication&& from) noexcept
    : Medication() {
    *this = ::std::move(from);
  }

  inline Medication& operator=(const Medication& from) {
    CopyFrom(from);
    return *this;
  }
  inline Medication& operator=(Medication&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Medication& default_instance() {
    return *internal_default_instance();
  }
  static inline const Medication* internal_default_instance() {
    return reinterpret_cast<const Medication*>(
               &_Medication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Medication& a, Medication& b) {
    a.Swap(&b);
  }
  inline void Swap(Medication* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Medication* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Medication* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Medication>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Medication& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Medication& from) {
    Medication::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Medication* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "health.Medication";
  }
  protected:
  explicit Medication(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDosageFieldNumber = 3,
    kMedicationIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string dosage = 3;
  void clear_dosage();
  const std::string& dosage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dosage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dosage();
  PROTOBUF_NODISCARD std::string* release_dosage();
  void set_allocated_dosage(std::string* dosage);
  private:
  const std::string& _internal_dosage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dosage(const std::string& value);
  std::string* _internal_mutable_dosage();
  public:

  // int32 medication_id = 1;
  void clear_medication_id();
  int32_t medication_id() const;
  void set_medication_id(int32_t value);
  private:
  int32_t _internal_medication_id() const;
  void _internal_set_medication_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:health.Medication)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dosage_;
    int32_t medication_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_health_5frecords_2eproto;
};
// -------------------------------------------------------------------

class HealthRecordRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:health.HealthRecordRequest) */ {
 public:
  inline HealthRecordRequest() : HealthRecordRequest(nullptr) {}
  ~HealthRecordRequest() override;
  explicit PROTOBUF_CONSTEXPR HealthRecordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HealthRecordRequest(const HealthRecordRequest& from);
  HealthRecordRequest(HealthRecordRequest&& from) noexcept
    : HealthRecordRequest() {
    *this = ::std::move(from);
  }

  inline HealthRecordRequest& operator=(const HealthRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthRecordRequest& operator=(HealthRecordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HealthRecordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthRecordRequest* internal_default_instance() {
    return reinterpret_cast<const HealthRecordRequest*>(
               &_HealthRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HealthRecordRequest& a, HealthRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthRecordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HealthRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HealthRecordRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HealthRecordRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HealthRecordRequest& from) {
    HealthRecordRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthRecordRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "health.HealthRecordRequest";
  }
  protected:
  explicit HealthRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientIdFieldNumber = 1,
  };
  // int32 patient_id = 1;
  void clear_patient_id();
  int32_t patient_id() const;
  void set_patient_id(int32_t value);
  private:
  int32_t _internal_patient_id() const;
  void _internal_set_patient_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:health.HealthRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t patient_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_health_5frecords_2eproto;
};
// -------------------------------------------------------------------

class HealthRecordResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:health.HealthRecordResponse) */ {
 public:
  inline HealthRecordResponse() : HealthRecordResponse(nullptr) {}
  ~HealthRecordResponse() override;
  explicit PROTOBUF_CONSTEXPR HealthRecordResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HealthRecordResponse(const HealthRecordResponse& from);
  HealthRecordResponse(HealthRecordResponse&& from) noexcept
    : HealthRecordResponse() {
    *this = ::std::move(from);
  }

  inline HealthRecordResponse& operator=(const HealthRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthRecordResponse& operator=(HealthRecordResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HealthRecordResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthRecordResponse* internal_default_instance() {
    return reinterpret_cast<const HealthRecordResponse*>(
               &_HealthRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HealthRecordResponse& a, HealthRecordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthRecordResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthRecordResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HealthRecordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HealthRecordResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HealthRecordResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HealthRecordResponse& from) {
    HealthRecordResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthRecordResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "health.HealthRecordResponse";
  }
  protected:
  explicit HealthRecordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientDataFieldNumber = 1,
  };
  // .health.PatientData patient_data = 1;
  bool has_patient_data() const;
  private:
  bool _internal_has_patient_data() const;
  public:
  void clear_patient_data();
  const ::health::PatientData& patient_data() const;
  PROTOBUF_NODISCARD ::health::PatientData* release_patient_data();
  ::health::PatientData* mutable_patient_data();
  void set_allocated_patient_data(::health::PatientData* patient_data);
  private:
  const ::health::PatientData& _internal_patient_data() const;
  ::health::PatientData* _internal_mutable_patient_data();
  public:
  void unsafe_arena_set_allocated_patient_data(
      ::health::PatientData* patient_data);
  ::health::PatientData* unsafe_arena_release_patient_data();

  // @@protoc_insertion_point(class_scope:health.HealthRecordResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::health::PatientData* patient_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_health_5frecords_2eproto;
};
// -------------------------------------------------------------------

class UpdateHealthRecordRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:health.UpdateHealthRecordRequest) */ {
 public:
  inline UpdateHealthRecordRequest() : UpdateHealthRecordRequest(nullptr) {}
  ~UpdateHealthRecordRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateHealthRecordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateHealthRecordRequest(const UpdateHealthRecordRequest& from);
  UpdateHealthRecordRequest(UpdateHealthRecordRequest&& from) noexcept
    : UpdateHealthRecordRequest() {
    *this = ::std::move(from);
  }

  inline UpdateHealthRecordRequest& operator=(const UpdateHealthRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateHealthRecordRequest& operator=(UpdateHealthRecordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateHealthRecordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateHealthRecordRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateHealthRecordRequest*>(
               &_UpdateHealthRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateHealthRecordRequest& a, UpdateHealthRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateHealthRecordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateHealthRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateHealthRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateHealthRecordRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateHealthRecordRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateHealthRecordRequest& from) {
    UpdateHealthRecordRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateHealthRecordRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "health.UpdateHealthRecordRequest";
  }
  protected:
  explicit UpdateHealthRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientDataFieldNumber = 1,
  };
  // .health.PatientData patient_data = 1;
  bool has_patient_data() const;
  private:
  bool _internal_has_patient_data() const;
  public:
  void clear_patient_data();
  const ::health::PatientData& patient_data() const;
  PROTOBUF_NODISCARD ::health::PatientData* release_patient_data();
  ::health::PatientData* mutable_patient_data();
  void set_allocated_patient_data(::health::PatientData* patient_data);
  private:
  const ::health::PatientData& _internal_patient_data() const;
  ::health::PatientData* _internal_mutable_patient_data();
  public:
  void unsafe_arena_set_allocated_patient_data(
      ::health::PatientData* patient_data);
  ::health::PatientData* unsafe_arena_release_patient_data();

  // @@protoc_insertion_point(class_scope:health.UpdateHealthRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::health::PatientData* patient_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_health_5frecords_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PatientData

// int32 patient_id = 1;
inline void PatientData::clear_patient_id() {
  _impl_.patient_id_ = 0;
}
inline int32_t PatientData::_internal_patient_id() const {
  return _impl_.patient_id_;
}
inline int32_t PatientData::patient_id() const {
  // @@protoc_insertion_point(field_get:health.PatientData.patient_id)
  return _internal_patient_id();
}
inline void PatientData::_internal_set_patient_id(int32_t value) {
  
  _impl_.patient_id_ = value;
}
inline void PatientData::set_patient_id(int32_t value) {
  _internal_set_patient_id(value);
  // @@protoc_insertion_point(field_set:health.PatientData.patient_id)
}

// repeated .health.Medication medications = 2;
inline int PatientData::_internal_medications_size() const {
  return _impl_.medications_.size();
}
inline int PatientData::medications_size() const {
  return _internal_medications_size();
}
inline void PatientData::clear_medications() {
  _impl_.medications_.Clear();
}
inline ::health::Medication* PatientData::mutable_medications(int index) {
  // @@protoc_insertion_point(field_mutable:health.PatientData.medications)
  return _impl_.medications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::health::Medication >*
PatientData::mutable_medications() {
  // @@protoc_insertion_point(field_mutable_list:health.PatientData.medications)
  return &_impl_.medications_;
}
inline const ::health::Medication& PatientData::_internal_medications(int index) const {
  return _impl_.medications_.Get(index);
}
inline const ::health::Medication& PatientData::medications(int index) const {
  // @@protoc_insertion_point(field_get:health.PatientData.medications)
  return _internal_medications(index);
}
inline ::health::Medication* PatientData::_internal_add_medications() {
  return _impl_.medications_.Add();
}
inline ::health::Medication* PatientData::add_medications() {
  ::health::Medication* _add = _internal_add_medications();
  // @@protoc_insertion_point(field_add:health.PatientData.medications)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::health::Medication >&
PatientData::medications() const {
  // @@protoc_insertion_point(field_list:health.PatientData.medications)
  return _impl_.medications_;
}

// -------------------------------------------------------------------

// Medication

// int32 medication_id = 1;
inline void Medication::clear_medication_id() {
  _impl_.medication_id_ = 0;
}
inline int32_t Medication::_internal_medication_id() const {
  return _impl_.medication_id_;
}
inline int32_t Medication::medication_id() const {
  // @@protoc_insertion_point(field_get:health.Medication.medication_id)
  return _internal_medication_id();
}
inline void Medication::_internal_set_medication_id(int32_t value) {
  
  _impl_.medication_id_ = value;
}
inline void Medication::set_medication_id(int32_t value) {
  _internal_set_medication_id(value);
  // @@protoc_insertion_point(field_set:health.Medication.medication_id)
}

// string name = 2;
inline void Medication::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Medication::name() const {
  // @@protoc_insertion_point(field_get:health.Medication.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Medication::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:health.Medication.name)
}
inline std::string* Medication::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:health.Medication.name)
  return _s;
}
inline const std::string& Medication::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Medication::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Medication::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Medication::release_name() {
  // @@protoc_insertion_point(field_release:health.Medication.name)
  return _impl_.name_.Release();
}
inline void Medication::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:health.Medication.name)
}

// string dosage = 3;
inline void Medication::clear_dosage() {
  _impl_.dosage_.ClearToEmpty();
}
inline const std::string& Medication::dosage() const {
  // @@protoc_insertion_point(field_get:health.Medication.dosage)
  return _internal_dosage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Medication::set_dosage(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dosage_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:health.Medication.dosage)
}
inline std::string* Medication::mutable_dosage() {
  std::string* _s = _internal_mutable_dosage();
  // @@protoc_insertion_point(field_mutable:health.Medication.dosage)
  return _s;
}
inline const std::string& Medication::_internal_dosage() const {
  return _impl_.dosage_.Get();
}
inline void Medication::_internal_set_dosage(const std::string& value) {
  
  _impl_.dosage_.Set(value, GetArenaForAllocation());
}
inline std::string* Medication::_internal_mutable_dosage() {
  
  return _impl_.dosage_.Mutable(GetArenaForAllocation());
}
inline std::string* Medication::release_dosage() {
  // @@protoc_insertion_point(field_release:health.Medication.dosage)
  return _impl_.dosage_.Release();
}
inline void Medication::set_allocated_dosage(std::string* dosage) {
  if (dosage != nullptr) {
    
  } else {
    
  }
  _impl_.dosage_.SetAllocated(dosage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dosage_.IsDefault()) {
    _impl_.dosage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:health.Medication.dosage)
}

// -------------------------------------------------------------------

// HealthRecordRequest

// int32 patient_id = 1;
inline void HealthRecordRequest::clear_patient_id() {
  _impl_.patient_id_ = 0;
}
inline int32_t HealthRecordRequest::_internal_patient_id() const {
  return _impl_.patient_id_;
}
inline int32_t HealthRecordRequest::patient_id() const {
  // @@protoc_insertion_point(field_get:health.HealthRecordRequest.patient_id)
  return _internal_patient_id();
}
inline void HealthRecordRequest::_internal_set_patient_id(int32_t value) {
  
  _impl_.patient_id_ = value;
}
inline void HealthRecordRequest::set_patient_id(int32_t value) {
  _internal_set_patient_id(value);
  // @@protoc_insertion_point(field_set:health.HealthRecordRequest.patient_id)
}

// -------------------------------------------------------------------

// HealthRecordResponse

// .health.PatientData patient_data = 1;
inline bool HealthRecordResponse::_internal_has_patient_data() const {
  return this != internal_default_instance() && _impl_.patient_data_ != nullptr;
}
inline bool HealthRecordResponse::has_patient_data() const {
  return _internal_has_patient_data();
}
inline void HealthRecordResponse::clear_patient_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.patient_data_ != nullptr) {
    delete _impl_.patient_data_;
  }
  _impl_.patient_data_ = nullptr;
}
inline const ::health::PatientData& HealthRecordResponse::_internal_patient_data() const {
  const ::health::PatientData* p = _impl_.patient_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::health::PatientData&>(
      ::health::_PatientData_default_instance_);
}
inline const ::health::PatientData& HealthRecordResponse::patient_data() const {
  // @@protoc_insertion_point(field_get:health.HealthRecordResponse.patient_data)
  return _internal_patient_data();
}
inline void HealthRecordResponse::unsafe_arena_set_allocated_patient_data(
    ::health::PatientData* patient_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.patient_data_);
  }
  _impl_.patient_data_ = patient_data;
  if (patient_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:health.HealthRecordResponse.patient_data)
}
inline ::health::PatientData* HealthRecordResponse::release_patient_data() {
  
  ::health::PatientData* temp = _impl_.patient_data_;
  _impl_.patient_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::health::PatientData* HealthRecordResponse::unsafe_arena_release_patient_data() {
  // @@protoc_insertion_point(field_release:health.HealthRecordResponse.patient_data)
  
  ::health::PatientData* temp = _impl_.patient_data_;
  _impl_.patient_data_ = nullptr;
  return temp;
}
inline ::health::PatientData* HealthRecordResponse::_internal_mutable_patient_data() {
  
  if (_impl_.patient_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::health::PatientData>(GetArenaForAllocation());
    _impl_.patient_data_ = p;
  }
  return _impl_.patient_data_;
}
inline ::health::PatientData* HealthRecordResponse::mutable_patient_data() {
  ::health::PatientData* _msg = _internal_mutable_patient_data();
  // @@protoc_insertion_point(field_mutable:health.HealthRecordResponse.patient_data)
  return _msg;
}
inline void HealthRecordResponse::set_allocated_patient_data(::health::PatientData* patient_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.patient_data_;
  }
  if (patient_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(patient_data);
    if (message_arena != submessage_arena) {
      patient_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patient_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.patient_data_ = patient_data;
  // @@protoc_insertion_point(field_set_allocated:health.HealthRecordResponse.patient_data)
}

// -------------------------------------------------------------------

// UpdateHealthRecordRequest

// .health.PatientData patient_data = 1;
inline bool UpdateHealthRecordRequest::_internal_has_patient_data() const {
  return this != internal_default_instance() && _impl_.patient_data_ != nullptr;
}
inline bool UpdateHealthRecordRequest::has_patient_data() const {
  return _internal_has_patient_data();
}
inline void UpdateHealthRecordRequest::clear_patient_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.patient_data_ != nullptr) {
    delete _impl_.patient_data_;
  }
  _impl_.patient_data_ = nullptr;
}
inline const ::health::PatientData& UpdateHealthRecordRequest::_internal_patient_data() const {
  const ::health::PatientData* p = _impl_.patient_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::health::PatientData&>(
      ::health::_PatientData_default_instance_);
}
inline const ::health::PatientData& UpdateHealthRecordRequest::patient_data() const {
  // @@protoc_insertion_point(field_get:health.UpdateHealthRecordRequest.patient_data)
  return _internal_patient_data();
}
inline void UpdateHealthRecordRequest::unsafe_arena_set_allocated_patient_data(
    ::health::PatientData* patient_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.patient_data_);
  }
  _impl_.patient_data_ = patient_data;
  if (patient_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:health.UpdateHealthRecordRequest.patient_data)
}
inline ::health::PatientData* UpdateHealthRecordRequest::release_patient_data() {
  
  ::health::PatientData* temp = _impl_.patient_data_;
  _impl_.patient_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::health::PatientData* UpdateHealthRecordRequest::unsafe_arena_release_patient_data() {
  // @@protoc_insertion_point(field_release:health.UpdateHealthRecordRequest.patient_data)
  
  ::health::PatientData* temp = _impl_.patient_data_;
  _impl_.patient_data_ = nullptr;
  return temp;
}
inline ::health::PatientData* UpdateHealthRecordRequest::_internal_mutable_patient_data() {
  
  if (_impl_.patient_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::health::PatientData>(GetArenaForAllocation());
    _impl_.patient_data_ = p;
  }
  return _impl_.patient_data_;
}
inline ::health::PatientData* UpdateHealthRecordRequest::mutable_patient_data() {
  ::health::PatientData* _msg = _internal_mutable_patient_data();
  // @@protoc_insertion_point(field_mutable:health.UpdateHealthRecordRequest.patient_data)
  return _msg;
}
inline void UpdateHealthRecordRequest::set_allocated_patient_data(::health::PatientData* patient_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.patient_data_;
  }
  if (patient_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(patient_data);
    if (message_arena != submessage_arena) {
      patient_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patient_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.patient_data_ = patient_data;
  // @@protoc_insertion_point(field_set_allocated:health.UpdateHealthRecordRequest.patient_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace health

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_health_5frecords_2eproto
