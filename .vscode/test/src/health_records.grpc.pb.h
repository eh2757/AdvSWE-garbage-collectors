// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: health_records.proto
#ifndef GRPC_health_5frecords_2eproto__INCLUDED
#define GRPC_health_5frecords_2eproto__INCLUDED

#include "health_records.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace health {

// gRPC Service Definition
class HealthRecordsService final {
 public:
  static constexpr char const* service_full_name() {
    return "health.HealthRecordsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AddHealthRecord(::grpc::ClientContext* context, const ::health::PatientData& request, ::health::HealthRecordResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::health::HealthRecordResponse>> AsyncAddHealthRecord(::grpc::ClientContext* context, const ::health::PatientData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::health::HealthRecordResponse>>(AsyncAddHealthRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::health::HealthRecordResponse>> PrepareAsyncAddHealthRecord(::grpc::ClientContext* context, const ::health::PatientData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::health::HealthRecordResponse>>(PrepareAsyncAddHealthRecordRaw(context, request, cq));
    }
    virtual ::grpc::Status GetHealthRecord(::grpc::ClientContext* context, const ::health::HealthRecordRequest& request, ::health::HealthRecordResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::health::HealthRecordResponse>> AsyncGetHealthRecord(::grpc::ClientContext* context, const ::health::HealthRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::health::HealthRecordResponse>>(AsyncGetHealthRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::health::HealthRecordResponse>> PrepareAsyncGetHealthRecord(::grpc::ClientContext* context, const ::health::HealthRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::health::HealthRecordResponse>>(PrepareAsyncGetHealthRecordRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateHealthRecord(::grpc::ClientContext* context, const ::health::UpdateHealthRecordRequest& request, ::health::HealthRecordResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::health::HealthRecordResponse>> AsyncUpdateHealthRecord(::grpc::ClientContext* context, const ::health::UpdateHealthRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::health::HealthRecordResponse>>(AsyncUpdateHealthRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::health::HealthRecordResponse>> PrepareAsyncUpdateHealthRecord(::grpc::ClientContext* context, const ::health::UpdateHealthRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::health::HealthRecordResponse>>(PrepareAsyncUpdateHealthRecordRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void AddHealthRecord(::grpc::ClientContext* context, const ::health::PatientData* request, ::health::HealthRecordResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddHealthRecord(::grpc::ClientContext* context, const ::health::PatientData* request, ::health::HealthRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetHealthRecord(::grpc::ClientContext* context, const ::health::HealthRecordRequest* request, ::health::HealthRecordResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetHealthRecord(::grpc::ClientContext* context, const ::health::HealthRecordRequest* request, ::health::HealthRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateHealthRecord(::grpc::ClientContext* context, const ::health::UpdateHealthRecordRequest* request, ::health::HealthRecordResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateHealthRecord(::grpc::ClientContext* context, const ::health::UpdateHealthRecordRequest* request, ::health::HealthRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::health::HealthRecordResponse>* AsyncAddHealthRecordRaw(::grpc::ClientContext* context, const ::health::PatientData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::health::HealthRecordResponse>* PrepareAsyncAddHealthRecordRaw(::grpc::ClientContext* context, const ::health::PatientData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::health::HealthRecordResponse>* AsyncGetHealthRecordRaw(::grpc::ClientContext* context, const ::health::HealthRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::health::HealthRecordResponse>* PrepareAsyncGetHealthRecordRaw(::grpc::ClientContext* context, const ::health::HealthRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::health::HealthRecordResponse>* AsyncUpdateHealthRecordRaw(::grpc::ClientContext* context, const ::health::UpdateHealthRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::health::HealthRecordResponse>* PrepareAsyncUpdateHealthRecordRaw(::grpc::ClientContext* context, const ::health::UpdateHealthRecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AddHealthRecord(::grpc::ClientContext* context, const ::health::PatientData& request, ::health::HealthRecordResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>> AsyncAddHealthRecord(::grpc::ClientContext* context, const ::health::PatientData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>>(AsyncAddHealthRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>> PrepareAsyncAddHealthRecord(::grpc::ClientContext* context, const ::health::PatientData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>>(PrepareAsyncAddHealthRecordRaw(context, request, cq));
    }
    ::grpc::Status GetHealthRecord(::grpc::ClientContext* context, const ::health::HealthRecordRequest& request, ::health::HealthRecordResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>> AsyncGetHealthRecord(::grpc::ClientContext* context, const ::health::HealthRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>>(AsyncGetHealthRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>> PrepareAsyncGetHealthRecord(::grpc::ClientContext* context, const ::health::HealthRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>>(PrepareAsyncGetHealthRecordRaw(context, request, cq));
    }
    ::grpc::Status UpdateHealthRecord(::grpc::ClientContext* context, const ::health::UpdateHealthRecordRequest& request, ::health::HealthRecordResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>> AsyncUpdateHealthRecord(::grpc::ClientContext* context, const ::health::UpdateHealthRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>>(AsyncUpdateHealthRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>> PrepareAsyncUpdateHealthRecord(::grpc::ClientContext* context, const ::health::UpdateHealthRecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>>(PrepareAsyncUpdateHealthRecordRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AddHealthRecord(::grpc::ClientContext* context, const ::health::PatientData* request, ::health::HealthRecordResponse* response, std::function<void(::grpc::Status)>) override;
      void AddHealthRecord(::grpc::ClientContext* context, const ::health::PatientData* request, ::health::HealthRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetHealthRecord(::grpc::ClientContext* context, const ::health::HealthRecordRequest* request, ::health::HealthRecordResponse* response, std::function<void(::grpc::Status)>) override;
      void GetHealthRecord(::grpc::ClientContext* context, const ::health::HealthRecordRequest* request, ::health::HealthRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateHealthRecord(::grpc::ClientContext* context, const ::health::UpdateHealthRecordRequest* request, ::health::HealthRecordResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateHealthRecord(::grpc::ClientContext* context, const ::health::UpdateHealthRecordRequest* request, ::health::HealthRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>* AsyncAddHealthRecordRaw(::grpc::ClientContext* context, const ::health::PatientData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>* PrepareAsyncAddHealthRecordRaw(::grpc::ClientContext* context, const ::health::PatientData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>* AsyncGetHealthRecordRaw(::grpc::ClientContext* context, const ::health::HealthRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>* PrepareAsyncGetHealthRecordRaw(::grpc::ClientContext* context, const ::health::HealthRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>* AsyncUpdateHealthRecordRaw(::grpc::ClientContext* context, const ::health::UpdateHealthRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>* PrepareAsyncUpdateHealthRecordRaw(::grpc::ClientContext* context, const ::health::UpdateHealthRecordRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddHealthRecord_;
    const ::grpc::internal::RpcMethod rpcmethod_GetHealthRecord_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateHealthRecord_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AddHealthRecord(::grpc::ServerContext* context, const ::health::PatientData* request, ::health::HealthRecordResponse* response);
    virtual ::grpc::Status GetHealthRecord(::grpc::ServerContext* context, const ::health::HealthRecordRequest* request, ::health::HealthRecordResponse* response);
    virtual ::grpc::Status UpdateHealthRecord(::grpc::ServerContext* context, const ::health::UpdateHealthRecordRequest* request, ::health::HealthRecordResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddHealthRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddHealthRecord() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddHealthRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddHealthRecord(::grpc::ServerContext* /*context*/, const ::health::PatientData* /*request*/, ::health::HealthRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddHealthRecord(::grpc::ServerContext* context, ::health::PatientData* request, ::grpc::ServerAsyncResponseWriter< ::health::HealthRecordResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHealthRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetHealthRecord() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetHealthRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealthRecord(::grpc::ServerContext* /*context*/, const ::health::HealthRecordRequest* /*request*/, ::health::HealthRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHealthRecord(::grpc::ServerContext* context, ::health::HealthRecordRequest* request, ::grpc::ServerAsyncResponseWriter< ::health::HealthRecordResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateHealthRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateHealthRecord() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateHealthRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateHealthRecord(::grpc::ServerContext* /*context*/, const ::health::UpdateHealthRecordRequest* /*request*/, ::health::HealthRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateHealthRecord(::grpc::ServerContext* context, ::health::UpdateHealthRecordRequest* request, ::grpc::ServerAsyncResponseWriter< ::health::HealthRecordResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddHealthRecord<WithAsyncMethod_GetHealthRecord<WithAsyncMethod_UpdateHealthRecord<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AddHealthRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddHealthRecord() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::health::PatientData, ::health::HealthRecordResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::health::PatientData* request, ::health::HealthRecordResponse* response) { return this->AddHealthRecord(context, request, response); }));}
    void SetMessageAllocatorFor_AddHealthRecord(
        ::grpc::MessageAllocator< ::health::PatientData, ::health::HealthRecordResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::health::PatientData, ::health::HealthRecordResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddHealthRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddHealthRecord(::grpc::ServerContext* /*context*/, const ::health::PatientData* /*request*/, ::health::HealthRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddHealthRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::health::PatientData* /*request*/, ::health::HealthRecordResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetHealthRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetHealthRecord() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::health::HealthRecordRequest, ::health::HealthRecordResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::health::HealthRecordRequest* request, ::health::HealthRecordResponse* response) { return this->GetHealthRecord(context, request, response); }));}
    void SetMessageAllocatorFor_GetHealthRecord(
        ::grpc::MessageAllocator< ::health::HealthRecordRequest, ::health::HealthRecordResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::health::HealthRecordRequest, ::health::HealthRecordResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetHealthRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealthRecord(::grpc::ServerContext* /*context*/, const ::health::HealthRecordRequest* /*request*/, ::health::HealthRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetHealthRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::health::HealthRecordRequest* /*request*/, ::health::HealthRecordResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateHealthRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateHealthRecord() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::health::UpdateHealthRecordRequest, ::health::HealthRecordResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::health::UpdateHealthRecordRequest* request, ::health::HealthRecordResponse* response) { return this->UpdateHealthRecord(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateHealthRecord(
        ::grpc::MessageAllocator< ::health::UpdateHealthRecordRequest, ::health::HealthRecordResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::health::UpdateHealthRecordRequest, ::health::HealthRecordResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateHealthRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateHealthRecord(::grpc::ServerContext* /*context*/, const ::health::UpdateHealthRecordRequest* /*request*/, ::health::HealthRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateHealthRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::health::UpdateHealthRecordRequest* /*request*/, ::health::HealthRecordResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AddHealthRecord<WithCallbackMethod_GetHealthRecord<WithCallbackMethod_UpdateHealthRecord<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddHealthRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddHealthRecord() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddHealthRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddHealthRecord(::grpc::ServerContext* /*context*/, const ::health::PatientData* /*request*/, ::health::HealthRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetHealthRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetHealthRecord() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetHealthRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealthRecord(::grpc::ServerContext* /*context*/, const ::health::HealthRecordRequest* /*request*/, ::health::HealthRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateHealthRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateHealthRecord() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateHealthRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateHealthRecord(::grpc::ServerContext* /*context*/, const ::health::UpdateHealthRecordRequest* /*request*/, ::health::HealthRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddHealthRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddHealthRecord() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddHealthRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddHealthRecord(::grpc::ServerContext* /*context*/, const ::health::PatientData* /*request*/, ::health::HealthRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddHealthRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetHealthRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetHealthRecord() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetHealthRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealthRecord(::grpc::ServerContext* /*context*/, const ::health::HealthRecordRequest* /*request*/, ::health::HealthRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHealthRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateHealthRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateHealthRecord() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateHealthRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateHealthRecord(::grpc::ServerContext* /*context*/, const ::health::UpdateHealthRecordRequest* /*request*/, ::health::HealthRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateHealthRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddHealthRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddHealthRecord() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddHealthRecord(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddHealthRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddHealthRecord(::grpc::ServerContext* /*context*/, const ::health::PatientData* /*request*/, ::health::HealthRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddHealthRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetHealthRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetHealthRecord() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetHealthRecord(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetHealthRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHealthRecord(::grpc::ServerContext* /*context*/, const ::health::HealthRecordRequest* /*request*/, ::health::HealthRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetHealthRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateHealthRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateHealthRecord() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateHealthRecord(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateHealthRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateHealthRecord(::grpc::ServerContext* /*context*/, const ::health::UpdateHealthRecordRequest* /*request*/, ::health::HealthRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateHealthRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddHealthRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddHealthRecord() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::health::PatientData, ::health::HealthRecordResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::health::PatientData, ::health::HealthRecordResponse>* streamer) {
                       return this->StreamedAddHealthRecord(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddHealthRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddHealthRecord(::grpc::ServerContext* /*context*/, const ::health::PatientData* /*request*/, ::health::HealthRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddHealthRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::health::PatientData,::health::HealthRecordResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHealthRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetHealthRecord() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::health::HealthRecordRequest, ::health::HealthRecordResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::health::HealthRecordRequest, ::health::HealthRecordResponse>* streamer) {
                       return this->StreamedGetHealthRecord(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetHealthRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHealthRecord(::grpc::ServerContext* /*context*/, const ::health::HealthRecordRequest* /*request*/, ::health::HealthRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHealthRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::health::HealthRecordRequest,::health::HealthRecordResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateHealthRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateHealthRecord() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::health::UpdateHealthRecordRequest, ::health::HealthRecordResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::health::UpdateHealthRecordRequest, ::health::HealthRecordResponse>* streamer) {
                       return this->StreamedUpdateHealthRecord(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateHealthRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateHealthRecord(::grpc::ServerContext* /*context*/, const ::health::UpdateHealthRecordRequest* /*request*/, ::health::HealthRecordResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateHealthRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::health::UpdateHealthRecordRequest,::health::HealthRecordResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddHealthRecord<WithStreamedUnaryMethod_GetHealthRecord<WithStreamedUnaryMethod_UpdateHealthRecord<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddHealthRecord<WithStreamedUnaryMethod_GetHealthRecord<WithStreamedUnaryMethod_UpdateHealthRecord<Service > > > StreamedService;
};

}  // namespace health


#endif  // GRPC_health_5frecords_2eproto__INCLUDED
