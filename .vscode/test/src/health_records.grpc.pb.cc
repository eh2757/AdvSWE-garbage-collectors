// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: health_records.proto

#include "health_records.pb.h"
#include "health_records.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace health {

static const char* HealthRecordsService_method_names[] = {
  "/health.HealthRecordsService/AddHealthRecord",
  "/health.HealthRecordsService/GetHealthRecord",
  "/health.HealthRecordsService/UpdateHealthRecord",
};

std::unique_ptr< HealthRecordsService::Stub> HealthRecordsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HealthRecordsService::Stub> stub(new HealthRecordsService::Stub(channel, options));
  return stub;
}

HealthRecordsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AddHealthRecord_(HealthRecordsService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetHealthRecord_(HealthRecordsService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateHealthRecord_(HealthRecordsService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status HealthRecordsService::Stub::AddHealthRecord(::grpc::ClientContext* context, const ::health::PatientData& request, ::health::HealthRecordResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::health::PatientData, ::health::HealthRecordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddHealthRecord_, context, request, response);
}

void HealthRecordsService::Stub::async::AddHealthRecord(::grpc::ClientContext* context, const ::health::PatientData* request, ::health::HealthRecordResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::health::PatientData, ::health::HealthRecordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddHealthRecord_, context, request, response, std::move(f));
}

void HealthRecordsService::Stub::async::AddHealthRecord(::grpc::ClientContext* context, const ::health::PatientData* request, ::health::HealthRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddHealthRecord_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>* HealthRecordsService::Stub::PrepareAsyncAddHealthRecordRaw(::grpc::ClientContext* context, const ::health::PatientData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::health::HealthRecordResponse, ::health::PatientData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddHealthRecord_, context, request);
}

::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>* HealthRecordsService::Stub::AsyncAddHealthRecordRaw(::grpc::ClientContext* context, const ::health::PatientData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddHealthRecordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HealthRecordsService::Stub::GetHealthRecord(::grpc::ClientContext* context, const ::health::HealthRecordRequest& request, ::health::HealthRecordResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::health::HealthRecordRequest, ::health::HealthRecordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetHealthRecord_, context, request, response);
}

void HealthRecordsService::Stub::async::GetHealthRecord(::grpc::ClientContext* context, const ::health::HealthRecordRequest* request, ::health::HealthRecordResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::health::HealthRecordRequest, ::health::HealthRecordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetHealthRecord_, context, request, response, std::move(f));
}

void HealthRecordsService::Stub::async::GetHealthRecord(::grpc::ClientContext* context, const ::health::HealthRecordRequest* request, ::health::HealthRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetHealthRecord_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>* HealthRecordsService::Stub::PrepareAsyncGetHealthRecordRaw(::grpc::ClientContext* context, const ::health::HealthRecordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::health::HealthRecordResponse, ::health::HealthRecordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetHealthRecord_, context, request);
}

::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>* HealthRecordsService::Stub::AsyncGetHealthRecordRaw(::grpc::ClientContext* context, const ::health::HealthRecordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetHealthRecordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status HealthRecordsService::Stub::UpdateHealthRecord(::grpc::ClientContext* context, const ::health::UpdateHealthRecordRequest& request, ::health::HealthRecordResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::health::UpdateHealthRecordRequest, ::health::HealthRecordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateHealthRecord_, context, request, response);
}

void HealthRecordsService::Stub::async::UpdateHealthRecord(::grpc::ClientContext* context, const ::health::UpdateHealthRecordRequest* request, ::health::HealthRecordResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::health::UpdateHealthRecordRequest, ::health::HealthRecordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateHealthRecord_, context, request, response, std::move(f));
}

void HealthRecordsService::Stub::async::UpdateHealthRecord(::grpc::ClientContext* context, const ::health::UpdateHealthRecordRequest* request, ::health::HealthRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateHealthRecord_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>* HealthRecordsService::Stub::PrepareAsyncUpdateHealthRecordRaw(::grpc::ClientContext* context, const ::health::UpdateHealthRecordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::health::HealthRecordResponse, ::health::UpdateHealthRecordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateHealthRecord_, context, request);
}

::grpc::ClientAsyncResponseReader< ::health::HealthRecordResponse>* HealthRecordsService::Stub::AsyncUpdateHealthRecordRaw(::grpc::ClientContext* context, const ::health::UpdateHealthRecordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateHealthRecordRaw(context, request, cq);
  result->StartCall();
  return result;
}

HealthRecordsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HealthRecordsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HealthRecordsService::Service, ::health::PatientData, ::health::HealthRecordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HealthRecordsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::health::PatientData* req,
             ::health::HealthRecordResponse* resp) {
               return service->AddHealthRecord(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HealthRecordsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HealthRecordsService::Service, ::health::HealthRecordRequest, ::health::HealthRecordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HealthRecordsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::health::HealthRecordRequest* req,
             ::health::HealthRecordResponse* resp) {
               return service->GetHealthRecord(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HealthRecordsService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HealthRecordsService::Service, ::health::UpdateHealthRecordRequest, ::health::HealthRecordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HealthRecordsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::health::UpdateHealthRecordRequest* req,
             ::health::HealthRecordResponse* resp) {
               return service->UpdateHealthRecord(ctx, req, resp);
             }, this)));
}

HealthRecordsService::Service::~Service() {
}

::grpc::Status HealthRecordsService::Service::AddHealthRecord(::grpc::ServerContext* context, const ::health::PatientData* request, ::health::HealthRecordResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HealthRecordsService::Service::GetHealthRecord(::grpc::ServerContext* context, const ::health::HealthRecordRequest* request, ::health::HealthRecordResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HealthRecordsService::Service::UpdateHealthRecord(::grpc::ServerContext* context, const ::health::UpdateHealthRecordRequest* request, ::health::HealthRecordResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace health

